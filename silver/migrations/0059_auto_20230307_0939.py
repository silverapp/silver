# Generated by Django 3.2.16 on 2023-03-07 09:39

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import silver.utils.models


class Migration(migrations.Migration):

    dependencies = [
        ('silver', '0058_auto_20220722_1050'),
    ]

    operations = [
        migrations.AlterField(
            model_name='discount',
            name='discount_stacking_type',
            field=models.CharField(choices=[('multiplicative', 'Multiplicative'), ('additive', 'Additive'), ('noncumulative', 'Noncumulative')], default='additive', help_text='Defines how the discount will interact with other discounts.', max_length=24),
        ),
        migrations.CreateModel(
            name='Bonus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="The bonus's name. May be used for identification or displaying in an invoice.", max_length=200)),
                ('filter_annotations', models.JSONField(blank=True, default=list)),
                ('amount', models.DecimalField(blank=True, decimal_places=4, help_text='The bonus amount. For example this might refer to the metered features included units.', max_digits=19, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('amount_percentage', models.DecimalField(blank=True, decimal_places=2, help_text='The bonus amount as percentage. For example 25 (%)', max_digits=5, null=True)),
                ('applies_to', models.CharField(choices=[('metered_features_units', 'Metered Features Units')], default='metered_features_units', help_text='Defines what the bonus applies to.', max_length=24)),
                ('state', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive')], default='active', help_text='Can be used to easily toggle bonuses on or off.', max_length=16)),
                ('start_date', models.DateField(blank=True, help_text="When set, the bonus will only apply to entries with a lower or equal start_date. Otherwise, a prorated bonus may still apply, butonly if the entries end_date is greater than the bonus's start_date.", null=True)),
                ('end_date', models.DateField(blank=True, help_text="When set, the bonus will only apply to entries with a greater or equal end_date. Otherwise, a prorated bonus may still apply, butonly if the entries start_date is lower than the bonus's end_date.", null=True)),
                ('duration_count', models.IntegerField(blank=True, help_text='Indicate the duration for which the bonus is available, after a subscription started. If not set, the duration is indefinite.', null=True)),
                ('duration_interval', models.CharField(blank=True, choices=[('billing_cycle', 'Billing Cycle'), ('day', 'Day'), ('week', 'Week'), ('month', 'Month'), ('year', 'Year')], max_length=16, null=True)),
                ('filter_customers', models.ManyToManyField(blank=True, related_name='filtering_bonuses', to='silver.Customer')),
                ('filter_plans', models.ManyToManyField(blank=True, related_name='filtering_bonuses', to='silver.Plan')),
                ('filter_product_codes', models.ManyToManyField(blank=True, related_name='filtering_bonuses', to='silver.ProductCode')),
                ('filter_subscriptions', models.ManyToManyField(blank=True, related_name='filtering_bonuses', to='silver.Subscription')),
                ('product_code', models.ForeignKey(blank=True, help_text="The bonus's product code.", null=True, on_delete=django.db.models.deletion.PROTECT, related_name='bonuses', to='silver.productcode')),
            ],
            options={
                'verbose_name_plural': 'bonuses',
            },
            bases=(silver.utils.models.AutoCleanModelMixin, models.Model),
        ),
    ]
