# Generated by Django 3.2.13 on 2022-06-28 11:59

from django.db import migrations, models
import django.db.models.deletion
import silver.utils.models


class Migration(migrations.Migration):

    dependencies = [
        ('silver', '0055_auto_20220502_0757'),
    ]

    operations = [
        migrations.CreateModel(
            name='Discount',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="The discount's display name.", max_length=200)),
                ('percentage', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('applies_to', models.CharField(choices=[('all', 'All'), ('plan_amount', 'Plan Amount'), ('metered_features', 'Metered Features')], default='all', help_text='Defines what the discount applies to.', max_length=24)),
                ('document_entry_behavior', models.CharField(choices=[('default', 'Default'), ('force_per_document', 'Force per document')], default='default', help_text='Defines how the discount will be shown in the billing documents.', max_length=32)),
                ('discount_stacking_type', models.CharField(choices=[('additive', 'Additive'), ('noncumulative', 'Noncumulative')], default='additive', help_text='Defines how the discount will interact with other discounts.', max_length=24)),
                ('state', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive')], default='active', help_text='Can be used to easily toggle discounts on or off.', max_length=16)),
                ('start_date', models.DateField(blank=True, help_text="When set, the discount will only apply to entries with a lower or equal start_date. Otherwise, a prorated discount may still apply, butonly if the entries end_date is greater than the discount's start_date.", null=True)),
                ('end_date', models.DateField(blank=True, help_text="When set, the discount will only apply to entries with a greater or equal end_date. Otherwise, a prorated discount may still apply, butonly if the entries start_date is lower than the discount's end_date.", null=True)),
                ('duration', models.DurationField(blank=True, help_text='Indicate the duration for which the discount is available, after a subscription started. If not set, the duration is indefinite.', null=True)),
                ('customers', models.ManyToManyField(blank=True, null=True, related_name='discounts', to='silver.Customer')),
                ('plans', models.ManyToManyField(blank=True, null=True, related_name='discounts', to='silver.Plan')),
                ('product_code', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='discounts', to='silver.productcode')),
                ('subscriptions', models.ManyToManyField(blank=True, null=True, related_name='discounts', to='silver.Subscription')),
            ],
            bases=(silver.utils.models.AutoCleanModelMixin, models.Model),
        ),
    ]
